1. Övergripande design: beskriv klasser och funktioner, och deras relationer till varandra.
Testklasser:
 - test_wordle_words (5 char, no special signs)

Klasser:
 - wordle_words (läser in en fil och filtrerar ut ord med 5 bokstäver och utan specialtecken.)


2. En kort användarinstruktion: hur bygger och testar man programmet? Försök att paketera
så mycket som möjligt med regler i makefilen. Det underlättar både under ert arbete och
gör att denna instruktion blir väldigt enkel att skriva.

3. Brister och kommentarer: Finns det något i lösning som du i efterhand anser borde gjorts
annorlunda? Andra kommentarer?


Krav:
1. Programmet ska ha en vettig design.
2. Klasser och funktioner ska ha tydligt avgränsade uppgifter och ansvarsområden.
3. Minneshantering ska vara korrekt: programmet får inte läcka minne.
4. Programkoden ska vara lätt att följa och förstå.
5. Koden ska vara formatterad på ett sätt som underlättar läsning. Detta innebär en vettig
indentering och att raderna inte är för långa.
6. Funktions- och variabelnamn ska vara väl valda och återspegla funktionens eller variabelns
innebörd.
7. Programmet ska kompilera med -Wall -Wextra -Werror -pedantic-errors
En tumregel, både för design och läsbarhet, är att en funktion inte får vara längre än 24
rader eller ha fler än 5–10 lokala variabler eller mer än tre indenterings-nivåer. Det finns
ibland goda skäl att göra ett undantag från detta, men ofta är det bättre att dela upp en
lång, komplex, funktion i några enkla hjälpfunktioner. Varje funktion ska bara göra en sak,
gör den flera – dela upp den.